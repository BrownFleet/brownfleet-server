name: Build, Test & Deploy

on:
  push:
    branches: [main]

jobs:
  ci-checks:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v3
      - name: Setup Node.js
        uses: actions/setup-node@v3
        with:
          node-version: 18
      - name: Install dependencies
        run: npm ci
      - name: Type check
        run: npm run type-check
      - name: Check formatting
        run: npm run format:check
      - name: Check circular dependencies
        run: npm run find-circulars
      - name: Run tests
        run: npm run test

  deploy:
    needs: ci-checks
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v3
      - name: Setup SSH for GitHub Actions â†’ GCP VM
        run: |
          mkdir -p ~/.ssh/github-client-to-vm
          echo "${{ secrets.GCP_SSH_KEY }}" > ~/.ssh/github-client-to-vm/id_ed25519
          chmod 600 ~/.ssh/github-client-to-vm/id_ed25519
          ssh-keyscan -H ${{ secrets.GCP_HOST }} >> ~/.ssh/github-client-to-vm/known_hosts
      - name: Create .env file for deploy
        run: |
          echo "DB_HOST=${{ secrets.DB_HOST }}" >> .env
          echo "DB_NAME=${{ secrets.DB_NAME }}" >> .env
          echo "DB_PASSWORD=${{ secrets.DB_PASSWORD }}" >> .env
          echo "DB_PORT=${{ secrets.DB_PORT }}" >> .env
          echo "DB_USERNAME=${{ secrets.DB_USERNAME }}" >> .env
          echo "MISTRAL_API_KEY=${{ secrets.MISTRAL_API_KEY }}" >> .env
          echo "NODE_ENV=${{ secrets.NODE_ENV }}" >> .env
          echo "PORT=${{ secrets.PORT }}" >> .env
          echo "PGADMIN_DEFAULT_EMAIL=${{ secrets.PGADMIN_DEFAULT_EMAIL }}" >> .env
          echo "PGADMIN_DEFAULT_PASSWORD=${{ secrets.PGADMIN_DEFAULT_PASSWORD }}" >> .env
          echo "PGADMIN_PORT=${{ secrets.PGADMIN_PORT }}" >> .env
      - name: Copy .env to VM
        run: |
          scp -i ~/.ssh/github-client-to-vm/id_ed25519 -o StrictHostKeyChecking=no .env ${{ secrets.GCP_USER }}@${{ secrets.GCP_HOST }}:~/brownfleet/.env
      - name: Deploy via SSH
        run: |
          ssh -i ~/.ssh/github-client-to-vm/id_ed25519 -o UserKnownHostsFile=~/.ssh/github-client-to-vm/known_hosts ${{ secrets.GCP_USER }}@${{ secrets.GCP_HOST }} <<-'EOF'
            set -e

            mkdir -p ~/.ssh/vm-client-to-github
            ssh-keyscan -H github.com >> ~/.ssh/vm-client-to-github/known_hosts

            mkdir -p ~/brownfleet

            if [ ! -d ~/brownfleet/brownfleet-server/.git ]; then
              git clone git@github.com:BrownFleet/brownfleet-server.git ~/brownfleet/brownfleet-server
            fi

            cd ~/brownfleet/brownfleet-server
            git pull origin main

            docker-compose --env-file ../.env down
            docker-compose --env-file ../.env up -d --build
          EOF

name: Build, Test & Deploy

on:
  push:
    branches: [main]

jobs:
  ci-checks:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v3
      - uses: actions/setup-node@v3
        with:
          node-version: 18
      - run: npm ci
      - run: npm run type-check
      - run: npm run format:check
      - run: npm run find-circulars
      - run: npm run test

  build-and-push:
    needs: ci-checks
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v3
      - run: echo "${{ secrets.GITHUB_TOKEN }}" | docker login ghcr.io -u ${{ github.actor }} --password-stdin
      - run: |
          docker build -t ghcr.io/brownfleet/brownfleet-server:latest .
          docker push ghcr.io/brownfleet/brownfleet-server:latest

  deploy:
    needs: build-and-push
    runs-on: ubuntu-latest
    timeout-minutes: 10
    steps:
      - uses: actions/checkout@v3

      - name: Setup SSH
        run: |
          mkdir -p ~/.ssh/github-client-to-vm
          echo "${{ secrets.GCP_SSH_KEY }}" > ~/.ssh/github-client-to-vm/id_ed25519
          chmod 600 ~/.ssh/github-client-to-vm/id_ed25519
          ssh-keyscan -H ${{ secrets.GCP_HOST }} >> ~/.ssh/github-client-to-vm/known_hosts
          chmod 644 ~/.ssh/github-client-to-vm/known_hosts

      - name: Create and copy .env to VM
        run: |
          cat <<EOF > .env
          DB_HOST=${{ secrets.DB_HOST }}
          DB_NAME=${{ secrets.DB_NAME }}
          DB_PASSWORD=${{ secrets.DB_PASSWORD }}
          DB_PORT=${{ secrets.DB_PORT }}
          DB_USERNAME=${{ secrets.DB_USERNAME }}
          MISTRAL_API_KEY=${{ secrets.MISTRAL_API_KEY }}
          NODE_ENV=production
          BASE_URL=${{ secrets.BASE_URL }}
          PORT=${{ secrets.PORT }}
          PGADMIN_DEFAULT_EMAIL=${{ secrets.PGADMIN_DEFAULT_EMAIL }}
          PGADMIN_DEFAULT_PASSWORD=${{ secrets.PGADMIN_DEFAULT_PASSWORD }}
          PGADMIN_PORT=${{ secrets.PGADMIN_PORT }}
          SUPABASE_SERVICE_ROLE_KEY=${{ secrets.SUPABASE_SERVICE_ROLE_KEY }}
          SUPABASE_URL=${{ secrets.SUPABASE_URL }}
          EOF

          scp -i ~/.ssh/github-client-to-vm/id_ed25519 \
              -o UserKnownHostsFile=~/.ssh/github-client-to-vm/known_hosts \
              -o StrictHostKeyChecking=no \
              .env ${{ secrets.GCP_USER }}@${{ secrets.GCP_HOST }}:~/brownfleet/.env

      - name: SSH Deploy to VM
        run: |
          ssh -i ~/.ssh/github-client-to-vm/id_ed25519 \
              -o UserKnownHostsFile=~/.ssh/github-client-to-vm/known_hosts \
              -o StrictHostKeyChecking=no \
              ${{ secrets.GCP_USER }}@${{ secrets.GCP_HOST }} <<'EOF'
            set -e
            mkdir -p ~/.ssh/vm-client-to-github
            ssh-keyscan -H github.com >> ~/.ssh/vm-client-to-github/known_hosts

            mkdir -p ~/brownfleet
            cd ~/brownfleet

            if [ ! -d brownfleet-server/.git ]; then
              git clone git@github.com:BrownFleet/brownfleet-server.git
            fi

            cd brownfleet-server
            git fetch origin
            git reset --hard origin/main

            echo "${{ secrets.GH_PAT }}" | sudo docker login ghcr.io -u ${{ secrets.GH_USERNAME }} --password-stdin

            sudo docker-compose -f docker-compose.prod.yml --env-file ../.env down
            sudo docker-compose -f docker-compose.prod.yml --env-file ../.env pull
            sudo docker-compose -f docker-compose.prod.yml --env-file ../.env up -d

            sudo docker exec brownfleet-api npm run migration:run:prod

            sudo docker ps
          EOF
